"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _axios = _interopRequireDefault(require("axios"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * HttpProxy
 */
var HttpProxy =
/*#__PURE__*/
function () {
  function HttpProxy(baseURL) {
    _classCallCheck(this, HttpProxy);

    this.httpClient = _axios["default"].create({
      baseURL: baseURL
    }); // withCredentials: true
  }

  _createClass(HttpProxy, [{
    key: "send",
    value: function send(method, path, params, opts) {
      var paramsObj = _objectSpread({
        method: method,
        url: path
      }, opts);

      if (params) {
        method === "get" ? paramsObj.params = params : paramsObj.data = params;
      }

      var cosmosCode = {
        "1": 60001,
        "2": 60002,
        "3": 60003,
        "4": 60004,
        "5": 60005,
        "6": 60006,
        "7": 60007,
        "8": 60008,
        "9": 60009,
        "10": 60010,
        "11": 60011,
        "12": 60012,
        "13": 60013,
        "14": 60014,
        "15": 60015,
        "16": 60016,
        "17": 60017,
        "18": 60018,
        "19": 60019,
        "20": 60020,
        "21": 60021,
        "111222": 60099
      };
      return this.httpClient.request(paramsObj).then(function (response) {
        if (method === 'get') {
          return {
            result: response.data,
            status: response.status
          };
        }

        var fmtResponse = {
          code: 0,
          data: null,
          msg: 'success',
          detail_msg: ''
        };
        var data = response.data || null;

        if (data.code) {
          fmtResponse.code = cosmosCode[data.code] ? cosmosCode[data.code] : data.code;
          fmtResponse.msg = data.raw_log || '';
          fmtResponse.detail_msg = fmtResponse.msg;
        }

        return {
          result: fmtResponse,
          status: response.status
        };
      })["catch"](function (err) {
        var fmtResponse = {
          code: -1,
          data: null,
          msg: err.response && err.response.data,
          detail_msg: ''
        };

        try {
          fmtResponse.msg = JSON.stringify(fmtResponse.msg);
        } catch (e) {
          fmtResponse.msg = err.response && err.response.data;
        }

        console.error("HttpProxy", err.response && err.response.data);
        var cmErr = err.response.data;

        if (cmErr && cmErr.code && cmErr.code > 0) {
          fmtResponse.code = cosmosCode[cmErr.code] ? cosmosCode[cmErr.code] : -1;
          fmtResponse.msg = cmErr.raw_log || '';
          return {
            result: fmtResponse,
            status: 200
          };
        }

        return {
          result: fmtResponse,
          status: 200
        };
      });
    }
  }]);

  return HttpProxy;
}();

var _default = HttpProxy;
exports["default"] = _default;